#!/usr/bin/env bash

# Copyright (C) 2013, ENPC
#     Author(s): Sylvain Dor√©
#
# This file is part of the air quality modeling system Polyphemus.
#
# Polyphemus is developed in the INRIA - ENPC joint project-team CLIME and in
# the ENPC - EDF R&D joint laboratory CEREA.
#
# Polyphemus is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# Polyphemus is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
# more details.
#
# For more information, visit the Polyphemus web site:
#      http://cerea.enpc.fr/polyphemus/


################################
# Constants and utilities

# user land approximative bandwidth shapping
bandwidth_KBs=5000000

script_dir=$(dirname $(readlink -f "$0"))
script_name=$(basename $0)

BGreen="\033[1;32m"
Green="\033[0;32m"
BRed="\033[1;31m"
Yellow="\033[0;33m"
BYellow="\033[1;33m"
Blue="\033[0;34m"
BBlue="\033[1;34m"
Purple="\033[0;35m"
BPurple="\033[1;35m"
Cyan="\033[0;36m"
Off="\033[0m"

Bold=`tput bold`
Normal=`tput sgr0`


function echoc()  {
  echo -e "$@$Off"
}


################################
# Parse arguments

function do_help() {
  echo
  echoc $BRed $@
  synopsis="$Bold
Synopsis
========
$Off
${Green}$script_name$Off ${BGreen}start$Off [${Blue}--argument-file=$Off${BBlue}<arguments list file>$Off] ${Blue}--computer-file=$Off${BBlue}<computer list file>$Off ${Blue}--log=$Off${BBlue}<log file>$Off [${Blue}--disable-keywords$Off] ${BBlue}<command>$Off
${Green}$script_name$Off (${BGreen}pause$Off|${BGreen}resume$Off) (${Blue}--computer-file=$Off${BBlue}<computer list file>$Off|${Blue}--computer-list=$Off${BBlue}<computer list>$Off)
${Green}$script_name$Off ${BGreen}help$Off
"

  if [[ $@ ]]; then
    echo -e "$synopsis"
    echo -e "Use ${BGreen}help$Off for further information."
    echo
  else
    echo -e "$Bold
Presentation of the $script_name command
================================
$Off
\"$script_name\" runs a set of commands in a cluster.
$synopsis
${Bold}Description
===========
$Off
${Green}$script_name$Off ${BGreen}start$Off [${Blue}--argument-file=$Off${BBlue}<arguments file>$Off] (${Blue}--computer-file=$Off${BBlue}<computer file>$Off|${Blue}--computer-list=$Off${BBlue}<computer list>$Off) ${Blue}--log=$Off${BBlue}<log file>$Off [${Blue}--disable-keywords$Off] ${BBlue}<command>$Off [${BBlue}<arguments>$Off]

  Starts a set of commands in the cluster:

  ${BBlue}<command>$Off [${BBlue}<arguments>$Off]
     The command to be run in the cluster, it can have arguments.

  [${Blue}--argument-file=$Off${BBlue}<arguments file>$Off]
     Each line of this file, after the header line, will be used as a list
     of arguments for ${BBlue}<command>$Off. Hence, ${BBlue}<command>$Off will be run once for each
     line of the file minus one.
     If ${BBlue}<arguments>$Off was already given to ${BBlue}<command>$Off, they are preserved, and the
     arguments from ${BBlue}<arguments file>$Off will be appended to them.

     ${BBlue}<arguments file>$Off must follow the following format:
     - Arguments are separated by tabulations.
     - The first line is a header line with column name.

     Arguments from ${BBlue}<arguments file>$Off are given to ${BBlue}<command>$Off in the form of
     ${BBlue}<column name>$Off=${BBlue}<cell value>$Off.

     If --argument-file is not used, then ${BBlue}<command>$Off is run once on each computer.

  ${Blue}--computer-file=$Off${BBlue}<computer file>$Off
     A file containing the list of computers, with : standing for localhost.

  ${Blue}--log=$Off${BBlue}<log file>$Off
     The log file that lists successfull and failed runs.
     It is used for resuming computations when ${BBlue}<log file>$Off already exists.
     Default to \"log\".
     Output of ${BBlue}<command>$Off (both stdout and stderr) is appended to \"${BBlue}<log file>$Off.output\".

  [${Blue}--disable-keywords$Off]
     ${BBlue}<command>$Off is called with arguments of the form
     ${BBlue}<cell value>$Off instead of ${BBlue}<column name>$Off=${BBlue}<cell value>$Off.


${Green}$script_name$Off (${BGreen}pause$Off|${BGreen}resume$Off|${BGreen}kill$Off) (${Blue}--computer-file=$Off${BBlue}<computers file>$Off|${Blue}--computer-list=$Off${BBlue}<computer list>$Off)

  Pause/resume/kill currently running commands in the cluster:

  ${Blue}--computer-file=$Off${BBlue}<computers file>$Off
    A file containing the list of computers, one per line, with : standing for localhost.

  ${Blue}--computer-list=$Off${BBlue}<computer list>$Off
    A list of comma separated computer, with : standing for localhost.


${Green}$script_name$Off ${BGreen}help$Off

  Displays this help.
$Bold
Note
====
$Off
Default sshd configuration can restrict the number of simultaneous connections.
Since every job will have its own connection, on highly multicore machines it can
hit the system limit.
To avoid this, add in /etc/ssh/sshd_config:
MaxSessions 40
MaxStartups 40:60:80

"
  fi

  if [[ $@ ]]; then
    exit 1
  else
    exit 0
  fi
}


function check_file () {
  [[ ! ${!1} ]] && do_help "Please specify a file to the \"--${1%_*}\" option."
  [[ ! -r ${!1} ]] && do_help "Cannot open file \"${!1}\" for reading."
}


function parse_arguments () {
  action=$1
  shift
  [[ ! $action ]] && do_help "Please add the correct arguments."
  type do_$action >& /dev/null ||
    do_help "Unrecognized action (valid actions are start/pause/resume/help)."

  [[ $action == "help" ]] && return

  while [[ $# != 0 ]]; do
    case $1 in
      --argument-file=*) argument_file=${1#*=};;
      --computer-file=*) computers_file=${1#*=};;
      --computer-list=*) computer_list=${1#*=};;
      --log=*) log_file=${1#*=};;
      --disable-keywords) no_keyword="yes";;
      -*) do_help "invalid argument";;
      *) [[ $action != start ]] && do_help "Unrecognized argument."
         break;;
    esac
    shift
  done

  [[ $computer_list && $computers_file ]] &&
    do_help "Please choose between ${Blue}--computer-file=$Off and ${Blue}--computer-list=$Off"

  if [[ $computer_list ]]; then
    computer_option="-j8"
  else
    check_file computers_file
    computer_option="-j8"
  fi

  if [[ $action = start ]]; then
    command=$(readlink -f $(which $1))
    shift
    command_arguments="$@"

    [[ $command ]] || do_help "Please specify a command to be run."
    if [[ $argument_file ]]; then
      check_file argument_file
      [[ $log_file ]] || log_file="log"
      if [[ -s $log_file ]]; then
        printf "\nThe log files already exist, what do you want to do?\n"
        local restart="Erase all the logs and start over."
        local resume="Keep the logs and resume where it stopped."
        select answer in "$restart" "$resume"; do
          case $answer in
            $restart) rm -i $log_file $log_file.output $log_file.failure
                      break;;
            $resume)  printf "Resuming computation...\n"
                      break;;
            "") continue;;
          esac
        done
      fi
      touch $log_file || "Cannot create/append to the log file \"$log_file\"."
      log_file_output=$log_file.output
      touch $log_file || "Cannot create/append to the log file \"$log_file.output\"."
    elif [[ $log_file ]]; then
      do_help "Cannot use log file with ${Blue}--computer-list$Off"
    else
      log_file_output=/dev/stdout
    fi
  fi

  do_$action
}


################################
# Run the algo

function do_start() {
  trap control_c SIGINT
  trap sigterm SIGTERM

  if [[ $argument_file ]]; then
    headers=$(head -n 1 $argument_file)
    if [[ $no_keyword ]]; then
      command_arguments+=" $(sed -n 's/\([^ ]\+\)\+/{\1}/gp' <<< "$headers")"
    else
      command_arguments+=" $(sed -n 's/\([^ ]\+\)\+/\1={\1}/gp' <<< "$headers")"
    fi
    options+=" --use-cpus-instead-of-cores --eta -a $argument_file --header : --resume --joblog $log_file"
  else
    options+=" --nonall"
  fi

  parallel $options --progress --colsep ' ' $computer_option "$command" "$command_arguments" 2>&1 >> "$log_file_output"
  status=$?
  cleanup

  if [[ $status != 0 ]]; then
    echo "=== There was $status failures ==="
  else
    echo "=== All tasks were successful ==="
  fi

  exit $status
}


function cleanup()
{
  if [[ -f $log_file ]]; then
    mv "$log_file" "$log_file.bak"
    head -n 1 < "$log_file.bak" > "$log_file" 
    cat "$log_file.bak" | awk -F$'\t' '$7 == 0 && $8 == 0 { print }' >> "$log_file"
    head -n 1 < "$log_file.bak" > "$log_file.failure"
    cat "$log_file.bak"|tail -n+2 | awk -F$'\t' '$7 != 0 || $8 != 0 { print }' >> "$log_file.failure"
    rm "$log_file.bak"
  fi
}


################################
# Stop the algo

function control_c()
{
  printf "\n*** Ctrl-C detected!"
  kill_algo
  exit 1
}


function sigterm()
{
  printf "\n*** SIGTERM received!\n"
  kill_algo
  exit 1
}


################################
# Pause/Resume/Kill the algo

function send_signal()
{
  local signal_name=$1
  parallel --nonall $computer_option \
    "for gpid in \$(pgrep -f -u $USER PARALLEL_PID); do\
       [[ \$gpid != \$\$ ]] && pkill -$signal_name -f -u $USER -g \$gpid; \
     done"
}


function do_pause()
{
  printf "\n  Pausing algorithm...\n"
  send_signal SIGSTOP
  printf "\n  Algorithm paused, exiting.\n"
}


function do_resume()
{
  printf "\n  Resuming algorithm...\n"
  send_signal SIGCONT
  printf "\n  Algorithm are running, exiting.\n"
}


function do_kill()
{
  while true; do
    printf "Do you want to kill your algorithm ? (y/n) "
    read  yn
    case $yn in
      [Yy]* ) kill_algo
              exit 0;;
      [Nn]* ) printf "\nOkay, not killing anything then.\n"
              break;;
      * ) printf "Please answer yes or no.\n";;
    esac
  done
}


function kill_algo()
{
  printf "\n*** Killing algorithm...\n"
  send_signal KILL
  printf "\n*** Algorithm killed, exiting.\n"
  cleanup
}


function main () {
  parse_arguments "$@"
  do_$action
}

main "$@"
